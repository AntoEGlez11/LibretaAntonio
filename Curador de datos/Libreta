IMPORTANCIA DE LA BD
    Las bases de datos digitales por su versatilidad y presicion se han integrado a todos los sectores de la sociedad, sustituyendo al papel y lapiz al manejo de informacion.
    Estas bases se usan para manipular d emanera facil, rapido y automatica por medio de software especializado.

    Ademas de reducir el tiempo de actualizacion y la consulta de la informacion, tienen otra ventajas, como.
    
    INTEGRIDAD de datos; la informacion no se repite y se pierde en el almacenamiento

    SEGURIDAD; la informacion solo puede consultada y modificada por personal capacitado y con permisos

    Se debe evitar dar mal uso como 
    1. Nunca proporcionar informacion de la base de datos
    2. No robar informacion de la base de datos
    3. Notificar anomalias o modificaciones, notificar al supervisor.

ESTRUCTURA DE BD
    Es un conjunto de informacion estructurada y relacionada que se almacena en un computadora y se consulta por medio de software especializado.
    Se compone de tablas y estas tienen campos y registros
        Los CAMPOS son los atributos o caracteristicas de la informacion que se desea guardar en la tabla y sirven como clasificadores.
        Los REGISTROS son los datos que estan ordenados en los campos conformando las filas en una tabla
    todas las tablas deben tener una llave primaria que es la identificacion unica para cada registro.
    Existen varios tipos de BD, pero las mas usadas son la ENTIDAD-RELACION 

MODELO ENTIDAD-RELACION
    Es la herramienta que se utiliza para dividir la informacion en tablas de menos tamaño y asi agilizar el procesamiento de datos, tambien permite actualizar de forma automatica la BD si se llega a modificar un registro.
    Se compone de los siguiente elementos:
        ENTIDAD = representacion de cualquier cosa que se distingue de las demas y de cual te interesa la informacion en un tabla
        
    Relacion de Entidades
        se relacionan a traves de llaves

    Representacion en diagrama de la siguiente manera
        Entidades = rectangulo
        Atributos = ovalos
        Relacion = rombos
        Union = flechas

NORMALIZACION
    Es el proceso de acomodar los datos de una base segun el modelo ENTIDAD-RELACION, existen 3 formas normales de realizarlo:

        1er Forma Normal
            Se agrupan los campos repetidos en uno solo, respetando la llave primaria de cada registro
        2da Forma Normal
            Separa los datos repetidos en tablas individuales, al mismo tiempo que asigna una llave foranea
        3ra Forma Normal
            Desagrega los campos que no dependen de las llaves primarias y los coloca en una tabla.


ADMINISTRADOR DE BASES DE DATOS

    De este depende la disponibilidad y seguridad de la informacion en las organizaciones
    Las DB no solo siren para conoecer datos, ahora sirven para hacer predicciones y el comportamiento de muchso aspectos de la organizacion. Estas predicciones se logran con la transformacion de los datos en informacion estructurada para el analisis y aplicacion, en sí los datos se convierten en conocimiento

    El DB aplica metodologias para la extraccion de datos, posterior lo transforma en un repositorio de informacion mas eficiente que permite realizar busquedas gracias a que la informacion esta enfocada a un objetivo de prediccion, para que sea lo mas eficiente posible estas deben estar Normalizadas

LENGUAJE SQL

    Es el Lenguaje Estructurado de Consulta y se divide en:
        Lenguaje de Definicion de Datos:
            Sirve para crear, modificar y borrar una BD, tablas y campos y contiene las siguientes funciones basicas:

    CREATE - Crear objetos de datos, como nuevas bases de datos, tablas, vistas etc.
    ALTER - Modificar una estructura de una tabla u objeto, se pueden agregar, quitar campos a una tabla; modificar el tipo de campo etc
    DROP - Elimina un objeto de la base de datos
    TRUNCATE - Borra todo el contenido de una tabla sin eliminar a la misma

        Lenguaje de Manipulacion de Datos:
            sirve para modificar, insertar, buscar o borrar un registro de la BD y opera con la siguientes funciones basicas:

    INSERT - Agregar registros a una tabla
    UPDATE - Actualizar registros sin necesidad de borrarlos y volverlos a agregar
    DELETE - Borra registros de una tabla
    SELECT - Busca informacion en una BD

MODELO RELACIONAL
    Este modelo basa sus logica en las relaciones por lo que no es muy diferente al modelo ENTIDAD-RELACIONAL
    ahora las Entidades son mostradas como la adstraccion de una tabla y los atributos se introducen en esta

    Al pasar una tabla al modelo relacional el primer campo es la llave primaria, seguido de las llaves foraneas y despues los demas campos

    La Cardinalidad se representan con lineas que relacionan dos tablas, desde una llave primaria hasta una llave foranea con la siguiente simbologia

        De uno a uno - cuando un elemento de una entidad solo se relaciona con otro elemento de otra entidad (/img/unoauno.JPG)
        De uno a muchos - cuando un elemento de una entidad se relaciona con muchos elementos de otra entidad (/img/unoamuchos.JPG)
        De muchos a muchos - cuando varios elementos de una entidad se pueden relacionan con dos o mas elementos de otra entidad (/img/muchosamuchos.JPG)
        De uno a cero o muchos - cuando un elemento de una tabla se relaciona con ninguno o muchos elementos de otra (/img/unoaceroomuchos.JPG)
        De muchos a cero o muchos - cuando muchos elementos de una tabla se relacionan con ninguno o muchos elementos de otra (/img/muchosaceroomuchos.JPG)

        Las cardinalidades pueden variar dependiendo del estandard que se utilice (/img/estandar1.JPG)
        En el estandar UML (el mas utilizado) se representan de la siguiente manera (/img/estandarUML.JPG)

    Construccion del Modelo relacional
    1. Definir las entidades o tablas necesarias en el Modelo relacional
    2. Establecer relaciones y anotar la cardinalidad
    3. Normaliza hasta la tercera forma normal
    4. Elige atributos, no almacenar datos que pueden inferir de otros
    5. Tabla cruzada "muchos a muchos" "a muchos o cero" Realizar una tabla cruzada
        Las tablas cruzadas se usan cuando existe una realcion de muchos a muchos o de muchos a cero, ya que si unes la tabla con una llave foranea a la otra tabla esa misma tendria incosistencias de duplicidad

ALMACEN DE DATOS
    Como administrador de BD tambien se estara ecargado del diseño y operacion de los Data Warehouse, se deben saber las funcionalidades

        Data Warehouse o Almacen de Datos
            Es una base de datos orientada al analisis de informacion, este almacen se olvida de las transacciones o procedimientos almcenados en la base de datos y solo se enfoca en extraer y reflejar informacion importante almacenada en otras bases de datos, pero debe cumplir con ciertas caracteristicas.
    1. Orientado a Temas - Todos los datos deben estar orientados al tema a analizar
    2. Variante en el tiempo - Los cambios de los datos en el tiempo deben quedar registrados para evitar perdidas de informacion
    3. No volatil - La informacion no se modifica ni se elimina, solo es de lectura

    La funcion del data warehouse es contener los datos utiles para el ambiente de negocio y posteriormente transformarlos en informacion relevante que se pueda analizar rapidamente. De esta forma los usuarios autorizados pueden realizar consultas o reportes sin tocar o afectar la operacion del sistema.
    Para cumplir la funcion del almacen es necesario tomar en cuenta el principio de separacion de los datos:
        Se deben separar los datos usados en operaciones de la base de datos de los datos que se guardan en el almacen para que nunca coincidan, con este principio se definen los ETL´s

        E-Extraccion - Obtener informacion deseada de datos almacenados
        T-Transformacion - Adecuarlos a los esquemas de data warehouse
        L-Carga - Depositar los datos en el almacen

    Data Marts - Son Bases de datos departamentales que se alimentan del data warehouse, con el fin de evitar una busqueda exahustiva por parte del sistema y asi recibir la informacion mas rapido. A cada data marts accede un numero limitado de usuarios que se dedican al analisis de informacion de un proposito especifico.
    Para el analisis de los data marts se contemplan los estructuras multidimensionales de datos

Esquema de Almacen de Datos
    Estan diseñados para proveer respuestas a practicamente a cualquier duda que pueda tener el personal sobre el funcionamiento de la empresa, ademas de asistir de informacion relevante a la toma de decisiones.
    Hay diferentes esquemas que se deben desarrollar y son los siguientes:

    Esquema Estrella - se llama asi porque la tabla de hechos o central esta rodeada de entidades llamadas dimensiones y lleva un diseño logico relacional, en la que la tabla de hechos recaen en la segunda forma normal. Las tablas de hechos pueden ser vistas como una tabla cruzada entre varias entidades y la llave primaria queda conformada por la conbinacion de las llaves primarias de las dimensiones, esto facilita la consulta de infoamcion ya qu esolo se almacena en una sola tabla de hechos.

    Esquema Copo de Nieve - Esta diseñado para el mantenimiento de dimensiones parecido a un modelo relacional, ya que cumple con la tercera forma normal; trata de segmentar informacion en caso de que esta sea muy extensa otra ventaja es que este esquema ahorra espacio en memoria.
    Las sentencias de consulta se vuelve mas complicadas

    Esquema Constelacion - en este existe mas de una tabla de hechos, asi las tablas de dimensiones pueden estar repartidas entre las tablas de hechos con el fin de tener diferente aspectos del negocio registrado.
    La gran ventaja de este esquema es su flexibilidad pero al generarla se sacrifica su facilidad y pueden llegar a ser dificiles de mantener en un futuro por el crecimiento de datos.

Funciones en SQL
    En SQL existen tres tipos de funciones:
        ESCALARES
        Estas devuelven un unico valor de cualquier tipo de datos
            Para identificar paramentros se pone un @
            --Syntax de funcion
                CREATE FUNCTION Nombre de la funcion(Nombre y Tipo dato)
                RETURNS tipo de dato
                AS
                BEGIN
                Codigo de la funcion
                END

        --Ejemplo (obtener el IVA de un dato) (/img/obtenerIVA.JPG)

                CREATE FUNCTION CalculoIVA(@Price money) RETURNS money
                AS
                BEGIN
                DECLARE @IVA money
                SET @IVA = @Price * 1.16
                RETURN @IVA
                END
                (/img/ejemploIVAfuncion.JPG)
        
        Ejecucion de una funcion
            Este se ejecuta desde la consulta, estas solo se pueden ejecutar dentro de una sentencia
                SELECT ProductoId, ProductName, UnitPrice, dbo.CalculoIVA(UnitPrice) AS IVA from Products

        LINEALES
        Son aquellas que regresan un conjunto de resultados correspondientes a una sentencia SELECT por los tanto el resultado es una tabla.
            --Syntax de funcion
                CREATE FUNCTION Nombre de la funcion(Parametro de entrada)RETURNS Tipo de dato
                RETURN(Codigo de consulta)

        --Ejemplo (obtener clientes de una misma nacionalidad) (/img/clientesNacionalidad.JPG)

                CREATE FUNCTION CountryCostumers (@Country nvarchar(15)) RETURNS table
                RETURN(SELECT custumerID,CompanyName,Country FROM Customers
                        WHERE Country = @Country)
            Esta funcion genera una tabla y la tienes que mandar llamar con un consulta
                SELECT * FROM dbo.CountryCostumers('Mexico')
            tampoco se pueden ejecutar sentanciar para ordenar    
     
        


        LINEA MULTIPLE SENTENCIAS
        Son muy parecidas a las funciones lineales solo que el resultado esta compuesto por la ejecucion de varias SELECT
            --Syntax de funcion
                CREATE FUNCTION Nombre de la funcion(Nombre y Tipo dato)
                RETURNS Nombre de variable table (Estructura de la tabla)
                AS
                BEGIN
                Codigo de la funcion
                END

        --Ejemplo (Seleccionar informacion del cliente por pais) (/img/clientexpais.JPG)
            CREATE FUNCTION CountryCostumers2(@Country nvarchar(15))
                RETURNS @TablaCountry table (CustomerID nachar (5),
                                             CompanyName(40),
                                             ContactName nvarchar (30),
                                             Country nvarchar (15))
                AS
                BEGIN
                    INSERT INTO @TableCountry
                    SELECT CustomerID, CompanyName,ContactName,Country FROM Customers
                    WHERE Country = @Country
                    RETURN
                END
                esta sentencia se tiene que escribir para mandarla llamar
                SELECT * FROM dbo.CountryCostumers2('Argentina')

TRIGGER
    Son disparadores de eventos y estos activaran procesos automaticos en la base de datos al utilizar una instruccion DML como INSERT DELETE o UPDATE.
    Cada Trigger esta anclado solamente a una tabla y funcionan para proteger a la base de datos de alteraciones.

    --Syntax de Trigger

        CREATE TRIGGER      Nombre del TRIGGER
        ON                  Nombre de la tabla
        AFTER o FOR               DML(INSERT,UPDATE,DELETE)
        **Con FOR - se activa primero el TRIGGER y despues la instruccion DML 
        AS
        BEGIN
        END
    
    --Ejemplo de Trigger (cuando exista una insercion enla tabla OrderDetails se restre la cantidad de productos comprados de products)

        CREATE TRIGGER  StockUpdate
        ON              [OrderDetails]
        FOR INSERT
        AS
        BEGIN
            DECLARE @Cantidad smallint, @ProductoId int, @Stock smallint
            SELECT @Cantidad=Cuantity, @ProductoID=ProductoID FROM inserted
            SELECT @Stock=UnitsinStock FROM Products WHERE ProductoId=ProductoID
            UPDATE Products SET UnitsinStock=@Stock-@Cantidad WHERE ProductoID=ProductoID